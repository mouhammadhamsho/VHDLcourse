// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/10/2019 12:33:18"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ModulePCRAM
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ModulePCRAM_vlg_sample_tst(
	CLK,
	PC_Count,
	PC_DATA_IN,
	PC_Load,
	PC_Write_Data,
	RAM_DATA_IN,
	RAM_WREN,
	RESET,
	sampler_tx
);
input  CLK;
input  PC_Count;
input [7:0] PC_DATA_IN;
input  PC_Load;
input  PC_Write_Data;
input [7:0] RAM_DATA_IN;
input  RAM_WREN;
input  RESET;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or PC_Count or PC_DATA_IN or PC_Load or PC_Write_Data or RAM_DATA_IN or RAM_WREN or RESET)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ModulePCRAM_vlg_check_tst (
	DEBUG_PC_COUNT,
	RAM_DATA_OUT,
	sampler_rx
);
input [7:0] DEBUG_PC_COUNT;
input [7:0] RAM_DATA_OUT;
input sampler_rx;

reg [7:0] DEBUG_PC_COUNT_expected;
reg [7:0] RAM_DATA_OUT_expected;

reg [7:0] DEBUG_PC_COUNT_prev;
reg [7:0] RAM_DATA_OUT_prev;

reg [7:0] DEBUG_PC_COUNT_expected_prev;
reg [7:0] RAM_DATA_OUT_expected_prev;

reg [7:0] last_DEBUG_PC_COUNT_exp;
reg [7:0] last_RAM_DATA_OUT_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	DEBUG_PC_COUNT_prev = DEBUG_PC_COUNT;
	RAM_DATA_OUT_prev = RAM_DATA_OUT;
end

// update expected /o prevs

always @(trigger)
begin
	DEBUG_PC_COUNT_expected_prev = DEBUG_PC_COUNT_expected;
	RAM_DATA_OUT_expected_prev = RAM_DATA_OUT_expected;
end


// expected RAM_DATA_OUT[ 7 ]
initial
begin
	RAM_DATA_OUT_expected[7] = 1'bX;
end 
// expected RAM_DATA_OUT[ 6 ]
initial
begin
	RAM_DATA_OUT_expected[6] = 1'bX;
end 
// expected RAM_DATA_OUT[ 5 ]
initial
begin
	RAM_DATA_OUT_expected[5] = 1'bX;
end 
// expected RAM_DATA_OUT[ 4 ]
initial
begin
	RAM_DATA_OUT_expected[4] = 1'bX;
end 
// expected RAM_DATA_OUT[ 3 ]
initial
begin
	RAM_DATA_OUT_expected[3] = 1'bX;
end 
// expected RAM_DATA_OUT[ 2 ]
initial
begin
	RAM_DATA_OUT_expected[2] = 1'bX;
end 
// expected RAM_DATA_OUT[ 1 ]
initial
begin
	RAM_DATA_OUT_expected[1] = 1'bX;
end 
// expected RAM_DATA_OUT[ 0 ]
initial
begin
	RAM_DATA_OUT_expected[0] = 1'bX;
end 
// expected DEBUG_PC_COUNT[ 7 ]
initial
begin
	DEBUG_PC_COUNT_expected[7] = 1'bX;
end 
// expected DEBUG_PC_COUNT[ 6 ]
initial
begin
	DEBUG_PC_COUNT_expected[6] = 1'bX;
end 
// expected DEBUG_PC_COUNT[ 5 ]
initial
begin
	DEBUG_PC_COUNT_expected[5] = 1'bX;
end 
// expected DEBUG_PC_COUNT[ 4 ]
initial
begin
	DEBUG_PC_COUNT_expected[4] = 1'bX;
end 
// expected DEBUG_PC_COUNT[ 3 ]
initial
begin
	DEBUG_PC_COUNT_expected[3] = 1'bX;
end 
// expected DEBUG_PC_COUNT[ 2 ]
initial
begin
	DEBUG_PC_COUNT_expected[2] = 1'bX;
end 
// expected DEBUG_PC_COUNT[ 1 ]
initial
begin
	DEBUG_PC_COUNT_expected[1] = 1'bX;
end 
// expected DEBUG_PC_COUNT[ 0 ]
initial
begin
	DEBUG_PC_COUNT_expected[0] = 1'bX;
end 
// generate trigger
always @(DEBUG_PC_COUNT_expected or DEBUG_PC_COUNT or RAM_DATA_OUT_expected or RAM_DATA_OUT)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DEBUG_PC_COUNT = %b | expected RAM_DATA_OUT = %b | ",DEBUG_PC_COUNT_expected_prev,RAM_DATA_OUT_expected_prev);
	$display("| real DEBUG_PC_COUNT = %b | real RAM_DATA_OUT = %b | ",DEBUG_PC_COUNT_prev,RAM_DATA_OUT_prev);
`endif
	if (
		( DEBUG_PC_COUNT_expected_prev[0] !== 1'bx ) && ( DEBUG_PC_COUNT_prev[0] !== DEBUG_PC_COUNT_expected_prev[0] )
		&& ((DEBUG_PC_COUNT_expected_prev[0] !== last_DEBUG_PC_COUNT_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_PC_COUNT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_PC_COUNT_expected_prev);
		$display ("     Real value = %b", DEBUG_PC_COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DEBUG_PC_COUNT_exp[0] = DEBUG_PC_COUNT_expected_prev[0];
	end
	if (
		( DEBUG_PC_COUNT_expected_prev[1] !== 1'bx ) && ( DEBUG_PC_COUNT_prev[1] !== DEBUG_PC_COUNT_expected_prev[1] )
		&& ((DEBUG_PC_COUNT_expected_prev[1] !== last_DEBUG_PC_COUNT_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_PC_COUNT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_PC_COUNT_expected_prev);
		$display ("     Real value = %b", DEBUG_PC_COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DEBUG_PC_COUNT_exp[1] = DEBUG_PC_COUNT_expected_prev[1];
	end
	if (
		( DEBUG_PC_COUNT_expected_prev[2] !== 1'bx ) && ( DEBUG_PC_COUNT_prev[2] !== DEBUG_PC_COUNT_expected_prev[2] )
		&& ((DEBUG_PC_COUNT_expected_prev[2] !== last_DEBUG_PC_COUNT_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_PC_COUNT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_PC_COUNT_expected_prev);
		$display ("     Real value = %b", DEBUG_PC_COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DEBUG_PC_COUNT_exp[2] = DEBUG_PC_COUNT_expected_prev[2];
	end
	if (
		( DEBUG_PC_COUNT_expected_prev[3] !== 1'bx ) && ( DEBUG_PC_COUNT_prev[3] !== DEBUG_PC_COUNT_expected_prev[3] )
		&& ((DEBUG_PC_COUNT_expected_prev[3] !== last_DEBUG_PC_COUNT_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_PC_COUNT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_PC_COUNT_expected_prev);
		$display ("     Real value = %b", DEBUG_PC_COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DEBUG_PC_COUNT_exp[3] = DEBUG_PC_COUNT_expected_prev[3];
	end
	if (
		( DEBUG_PC_COUNT_expected_prev[4] !== 1'bx ) && ( DEBUG_PC_COUNT_prev[4] !== DEBUG_PC_COUNT_expected_prev[4] )
		&& ((DEBUG_PC_COUNT_expected_prev[4] !== last_DEBUG_PC_COUNT_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_PC_COUNT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_PC_COUNT_expected_prev);
		$display ("     Real value = %b", DEBUG_PC_COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DEBUG_PC_COUNT_exp[4] = DEBUG_PC_COUNT_expected_prev[4];
	end
	if (
		( DEBUG_PC_COUNT_expected_prev[5] !== 1'bx ) && ( DEBUG_PC_COUNT_prev[5] !== DEBUG_PC_COUNT_expected_prev[5] )
		&& ((DEBUG_PC_COUNT_expected_prev[5] !== last_DEBUG_PC_COUNT_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_PC_COUNT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_PC_COUNT_expected_prev);
		$display ("     Real value = %b", DEBUG_PC_COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DEBUG_PC_COUNT_exp[5] = DEBUG_PC_COUNT_expected_prev[5];
	end
	if (
		( DEBUG_PC_COUNT_expected_prev[6] !== 1'bx ) && ( DEBUG_PC_COUNT_prev[6] !== DEBUG_PC_COUNT_expected_prev[6] )
		&& ((DEBUG_PC_COUNT_expected_prev[6] !== last_DEBUG_PC_COUNT_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_PC_COUNT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_PC_COUNT_expected_prev);
		$display ("     Real value = %b", DEBUG_PC_COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DEBUG_PC_COUNT_exp[6] = DEBUG_PC_COUNT_expected_prev[6];
	end
	if (
		( DEBUG_PC_COUNT_expected_prev[7] !== 1'bx ) && ( DEBUG_PC_COUNT_prev[7] !== DEBUG_PC_COUNT_expected_prev[7] )
		&& ((DEBUG_PC_COUNT_expected_prev[7] !== last_DEBUG_PC_COUNT_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_PC_COUNT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_PC_COUNT_expected_prev);
		$display ("     Real value = %b", DEBUG_PC_COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DEBUG_PC_COUNT_exp[7] = DEBUG_PC_COUNT_expected_prev[7];
	end
	if (
		( RAM_DATA_OUT_expected_prev[0] !== 1'bx ) && ( RAM_DATA_OUT_prev[0] !== RAM_DATA_OUT_expected_prev[0] )
		&& ((RAM_DATA_OUT_expected_prev[0] !== last_RAM_DATA_OUT_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_DATA_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_DATA_OUT_expected_prev);
		$display ("     Real value = %b", RAM_DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RAM_DATA_OUT_exp[0] = RAM_DATA_OUT_expected_prev[0];
	end
	if (
		( RAM_DATA_OUT_expected_prev[1] !== 1'bx ) && ( RAM_DATA_OUT_prev[1] !== RAM_DATA_OUT_expected_prev[1] )
		&& ((RAM_DATA_OUT_expected_prev[1] !== last_RAM_DATA_OUT_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_DATA_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_DATA_OUT_expected_prev);
		$display ("     Real value = %b", RAM_DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RAM_DATA_OUT_exp[1] = RAM_DATA_OUT_expected_prev[1];
	end
	if (
		( RAM_DATA_OUT_expected_prev[2] !== 1'bx ) && ( RAM_DATA_OUT_prev[2] !== RAM_DATA_OUT_expected_prev[2] )
		&& ((RAM_DATA_OUT_expected_prev[2] !== last_RAM_DATA_OUT_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_DATA_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_DATA_OUT_expected_prev);
		$display ("     Real value = %b", RAM_DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RAM_DATA_OUT_exp[2] = RAM_DATA_OUT_expected_prev[2];
	end
	if (
		( RAM_DATA_OUT_expected_prev[3] !== 1'bx ) && ( RAM_DATA_OUT_prev[3] !== RAM_DATA_OUT_expected_prev[3] )
		&& ((RAM_DATA_OUT_expected_prev[3] !== last_RAM_DATA_OUT_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_DATA_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_DATA_OUT_expected_prev);
		$display ("     Real value = %b", RAM_DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RAM_DATA_OUT_exp[3] = RAM_DATA_OUT_expected_prev[3];
	end
	if (
		( RAM_DATA_OUT_expected_prev[4] !== 1'bx ) && ( RAM_DATA_OUT_prev[4] !== RAM_DATA_OUT_expected_prev[4] )
		&& ((RAM_DATA_OUT_expected_prev[4] !== last_RAM_DATA_OUT_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_DATA_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_DATA_OUT_expected_prev);
		$display ("     Real value = %b", RAM_DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RAM_DATA_OUT_exp[4] = RAM_DATA_OUT_expected_prev[4];
	end
	if (
		( RAM_DATA_OUT_expected_prev[5] !== 1'bx ) && ( RAM_DATA_OUT_prev[5] !== RAM_DATA_OUT_expected_prev[5] )
		&& ((RAM_DATA_OUT_expected_prev[5] !== last_RAM_DATA_OUT_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_DATA_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_DATA_OUT_expected_prev);
		$display ("     Real value = %b", RAM_DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RAM_DATA_OUT_exp[5] = RAM_DATA_OUT_expected_prev[5];
	end
	if (
		( RAM_DATA_OUT_expected_prev[6] !== 1'bx ) && ( RAM_DATA_OUT_prev[6] !== RAM_DATA_OUT_expected_prev[6] )
		&& ((RAM_DATA_OUT_expected_prev[6] !== last_RAM_DATA_OUT_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_DATA_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_DATA_OUT_expected_prev);
		$display ("     Real value = %b", RAM_DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RAM_DATA_OUT_exp[6] = RAM_DATA_OUT_expected_prev[6];
	end
	if (
		( RAM_DATA_OUT_expected_prev[7] !== 1'bx ) && ( RAM_DATA_OUT_prev[7] !== RAM_DATA_OUT_expected_prev[7] )
		&& ((RAM_DATA_OUT_expected_prev[7] !== last_RAM_DATA_OUT_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_DATA_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_DATA_OUT_expected_prev);
		$display ("     Real value = %b", RAM_DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RAM_DATA_OUT_exp[7] = RAM_DATA_OUT_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ModulePCRAM_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg PC_Count;
reg [7:0] PC_DATA_IN;
reg PC_Load;
reg PC_Write_Data;
reg [7:0] RAM_DATA_IN;
reg RAM_WREN;
reg RESET;
// wires                                               
wire [7:0] DEBUG_PC_COUNT;
wire [7:0] RAM_DATA_OUT;

wire sampler;                             

// assign statements (if any)                          
ModulePCRAM i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.DEBUG_PC_COUNT(DEBUG_PC_COUNT),
	.PC_Count(PC_Count),
	.PC_DATA_IN(PC_DATA_IN),
	.PC_Load(PC_Load),
	.PC_Write_Data(PC_Write_Data),
	.RAM_DATA_IN(RAM_DATA_IN),
	.RAM_DATA_OUT(RAM_DATA_OUT),
	.RAM_WREN(RAM_WREN),
	.RESET(RESET)
);

// PC_Count
initial
begin
	repeat(6)
	begin
		PC_Count = 1'b0;
		PC_Count = #80000 1'b1;
		# 80000;
	end
	PC_Count = 1'b0;
end 
// PC_DATA_IN[ 7 ]
initial
begin
	PC_DATA_IN[7] = 1'b0;
end 
// PC_DATA_IN[ 6 ]
initial
begin
	PC_DATA_IN[6] = 1'b0;
end 
// PC_DATA_IN[ 5 ]
initial
begin
	PC_DATA_IN[5] = 1'b0;
end 
// PC_DATA_IN[ 4 ]
initial
begin
	PC_DATA_IN[4] = 1'b0;
end 
// PC_DATA_IN[ 3 ]
initial
begin
	PC_DATA_IN[3] = 1'b0;
end 
// PC_DATA_IN[ 2 ]
initial
begin
	PC_DATA_IN[2] = 1'b0;
end 
// PC_DATA_IN[ 1 ]
initial
begin
	PC_DATA_IN[1] = 1'b0;
end 
// PC_DATA_IN[ 0 ]
initial
begin
	PC_DATA_IN[0] = 1'b0;
end 

// PC_Load
initial
begin
	PC_Load = 1'b0;
end 

// PC_Write_Data
initial
begin
	PC_Write_Data = 1'b0;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 
// RAM_DATA_IN[ 7 ]
initial
begin
	RAM_DATA_IN[7] = 1'b0;
end 
// RAM_DATA_IN[ 6 ]
initial
begin
	RAM_DATA_IN[6] = 1'b0;
end 
// RAM_DATA_IN[ 5 ]
initial
begin
	RAM_DATA_IN[5] = 1'b0;
end 
// RAM_DATA_IN[ 4 ]
initial
begin
	RAM_DATA_IN[4] = 1'b0;
end 
// RAM_DATA_IN[ 3 ]
initial
begin
	RAM_DATA_IN[3] = 1'b0;
	RAM_DATA_IN[3] = #20000 1'b1;
	RAM_DATA_IN[3] = #20000 1'b0;
end 
// RAM_DATA_IN[ 2 ]
initial
begin
	RAM_DATA_IN[2] = 1'b1;
	RAM_DATA_IN[2] = #40000 1'b0;
end 
// RAM_DATA_IN[ 1 ]
initial
begin
	RAM_DATA_IN[1] = 1'b0;
	RAM_DATA_IN[1] = #20000 1'b1;
	RAM_DATA_IN[1] = #20000 1'b0;
end 
// RAM_DATA_IN[ 0 ]
initial
begin
	RAM_DATA_IN[0] = 1'b0;
	RAM_DATA_IN[0] = #20000 1'b1;
	RAM_DATA_IN[0] = #20000 1'b0;
end 

// RAM_WREN
initial
begin
	RAM_WREN = 1'b1;
	RAM_WREN = #40000 1'b0;
end 

// RESET
initial
begin
	RESET = 1'b0;
end 

ModulePCRAM_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.PC_Count(PC_Count),
	.PC_DATA_IN(PC_DATA_IN),
	.PC_Load(PC_Load),
	.PC_Write_Data(PC_Write_Data),
	.RAM_DATA_IN(RAM_DATA_IN),
	.RAM_WREN(RAM_WREN),
	.RESET(RESET),
	.sampler_tx(sampler)
);

ModulePCRAM_vlg_check_tst tb_out(
	.DEBUG_PC_COUNT(DEBUG_PC_COUNT),
	.RAM_DATA_OUT(RAM_DATA_OUT),
	.sampler_rx(sampler)
);
endmodule

